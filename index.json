[{"categories":["AWS","SQL","MSSQL"],"contents":"AWS RDS SQL Backup RDS to S3 backup and restore documentation exec msdb.dbo.rds_backup_database @source_db_name=\u0026#39;database_name\u0026#39;, @s3_arn_to_backup_to=\u0026#39;arn:aws:s3:::bucket_name/file_name_and_extension\u0026#39;, @overwrite_S3_backup_file=1; Restore from S3 exec msdb.dbo.rds_restore_database @restore_db_name=\u0026#39;database_name\u0026#39;, @s3_arn_to_restore_from=\u0026#39;arn:aws:s3:::bucket_name/file_name_and_extension\u0026#39;; Check RDS Status exec msdb.dbo.rds_task_status @db_name=\u0026#39;database_name\u0026#39; ","permalink":"https://markridgwell.com/posts/aws/mssql/","tags":["RDS"],"title":"AWS RDS SQL"},{"categories":["Ethereum","Geth"],"contents":"Ethereum Geth Node list peers: admin.peers Node Info: admin.nodeInfo Sealers list sealers clique.getSigners() list propositions: clique.proposals discard a proposition: clique.discard(\u0026quot;0x1234234234234\u0026quot;) add a new sealer: clique.propose(\u0026quot;0x1234243214312\u0026quot;, true) remove a sealer: clique.propose(\u0026quot;0x1234243214312\u0026quot;, false) Generate toml file geth --datadir ./chain --nat extip:182.168.1.2 dumpconfig echo \u0026gt; config.toml ","permalink":"https://markridgwell.com/posts/ethereum/geth/","tags":["Ethereum","Blockchain"],"title":"Ethereum"},{"categories":["Security"],"contents":"GPG List Keys gpg --list-keys Export Key However, you may not want to bring all that trust data and lots of keys with you. If you\u0026rsquo;d just like to copy your keys over, first export them (as usual, we assume gpg is in your path):\ngpg --export-secret-keys -a keyid \u0026gt; my_private_key.asc gpg --export -a keyid \u0026gt; my_public_key.asc Where keyid is your PGP Key ID, such as A1E732BB. Take the the two files, securely copy them to the new machine (it is unadvisable to ftp them or use plain-text protocols because even thought your private key there is encrypted with your passphrase, your passphrase is still the weakest link, and you want to avoid exposure to your private key wherever possible).\nImport Key gpg --import my_private_key.asc gpg --import my_public_key.asc ","permalink":"https://markridgwell.com/posts/gpg/readme/","tags":["GPG","Security"],"title":"GPG"},{"categories":["Linux"],"contents":"Linux Package Management Debian based Removing unused packages apt autoremove Arch based Removing unused packages List what is unused\npacman -Qdtq Remove all unused\npacman -Qdtq | pacman -Rs - Remove Multilib packages:\npacman -R `LANG=C pacman -Sl multilib | grep installed | cut -d \u0026#39; \u0026#39; -f 2` Once done edit /etc/pacman.conf and comment out the ``[multilib]` section\nDynamic DNS with ddclient sudo apt-get install ddclient libdata-validate-ip-perl libjson-any-perl net-tools Edit /etc/ddclient.conf as:\ndaemon=1800 syslog=yes protocol=cloudflare use=web web=checkip.dyndns.org/ 6 web-skip=‘IP Address’ ssl=yes login=\u0026lt;Cloudflare Login\u0026gt; password=\u0026lt;APIKEY\u0026gt; zone=example.com host.example.com Verify config\nsudo service ddclient status sudo ddclient -query sudo ddclient -daemon=0 -verbose -noquiet Enable Service\nsudo service ddclient status Set Hostname sudo hostnamectl set-hostname whatever.example.com Correct Keyboard layout See\nxmodmap -e \u0026#39;keycode 49 = grave\u0026#39; ","permalink":"https://markridgwell.com/posts/linux/readme/","tags":["Package Management","Dynamic DNS"],"title":"Linux"},{"categories":["SQL"],"contents":"SQL Server notes Take DB offline USE [master] GO ALTER DATABASE [MyDatabase] SET OFFLINE GO Create Login to SQL Server CREATE LOGIN reports WITH PASSWORD = \u0026#39;somethingsecure\u0026#39;, CHECK_EXPIRATION = ON Change SQL Server password alter login reports with password = \u0026#39;secure password\u0026#39; Grant rights to a user in db use [Database-name] GO -- add DB user CREATE USER [Reports-User] FROM LOGIN [reports] GO -- map that user to a role in the db EXEC sp_addrolemember \u0026#39;reports\u0026#39;, \u0026#39;Reports-User\u0026#39;; GO ","permalink":"https://markridgwell.com/posts/sql/mssql/readme/","tags":["MSSQL","Security"],"title":"MSSQL Notes"},{"categories":["Security","SSH"],"contents":"SSH Generate an elliptic curve key See https://blog.g3rt.nl/upgrade-your-ssh-keys.html\nssh-keygen -o -a 100 -t ed25519 e.g. using a large number of rounds\nssh-keygen -o -a 1000000000 -t ed25519 -f d:\\test_ed Proxy RDP over ssh Start SSH:\nssh mark@sshbox -L 9000:machine-to-remote-to:3389 Where:\n\u0026lsquo;sshbox\u0026rsquo; is the SSH Proxy 9000 is the local port Connect:\nmstsc /v:localhost:9000 Generate a key compatible with TeamCity Teamcity requires keys to be in a specific format\nssh-keygen -t rsa -m PEM -f id_project ","permalink":"https://markridgwell.com/posts/ssh/readme/","tags":["SSH","Security"],"title":"SSH"}]